import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Objects;

public class AggregateSnippets {

    public static void main(String[] args) throws Throwable {
        final var repoRoot = Paths.get("").toAbsolutePath();
        final var snippetsSrcRoot = repoRoot.resolve("src/main/java/com/vonage/quickstart");
        final var classFileName = "AggregateSnippets.java";
        var sb = new StringBuilder(1 << 17)
                .append("# Vonage Java SDK Code Snippets\n")
                .append("Here are all the snippets in this repository.\n")
                .append("This file was generated by running [").append(classFileName)
                .append("](src/main/java/").append(classFileName)
                .append(") from the root of the repository.")
                .append("\n\n## Contents");

        var allDirs = Files.list(snippetsSrcRoot)
                .filter(Files::isDirectory)
                .map(Path::toFile)
                .sorted((f1, f2) -> {
                    if (isInitialize(f1)) return -1;
                    if (isInitialize(f2)) return 1;
                    return f1.getName().compareToIgnoreCase(f2.getName());
                })
                .toList();

        for (var file : allDirs) {
            var title = toHeadingTitle(file.getName());
            sb.append("\n- [**").append(title).append("**](#")
                    .append(title.toLowerCase().replace(' ', '-')).append(")");
        }
        sb.append("\n");

        for (var file : allDirs) {
            appendSnippetContent(sb, file, 2);
        }

        var destPath = repoRoot.resolve("SNIPPETS.md");
        Files.deleteIfExists(destPath);
        Files.writeString(destPath, sb.toString(), StandardOpenOption.CREATE_NEW);
    }

    static boolean isInitialize(File file) {
        return file.getName().equals("initialize");
    }

    static String toHeadingTitle(String title) {
        var acronyms = new String[]{
                "jwt", "id", "uuid", "url", "sim",
                "sms", "rcs", "mms", "psd2", "dlr", "cnam",
                "dtmf", "asr", "tts", "ncco", "rtc"
        };
        var result = (title.substring(0, 1).toUpperCase() + title.substring(1))
                .replace("NCCO", "ncco")    // To avoid adding spaces in the next regex
                .replaceAll("(?<!^)([A-Z])(?![A-Z])", " $1")
                .replace("Numberinsight2", "Fraud Detection")
                .replace("Numberinsight", "Number Insight")
                .replace("Verify\n", "Verify (Legacy)\n")
                .replace("Verify2", "Verify v2")
                .replace("Whatsapp", "WhatsApp")
                .replace("Simswap", "SIM Swap")
                .replace("Callncco", "Call NCCO");
        for (var ac : acronyms) {
            result = result.replaceAll("\\b(?i:"+ac+")\\b", ac.toUpperCase());
        }
        if ("Insight".equals(result)) {
            result = "Number Insight";
        }
        return result;
    }

    static void appendSnippetContent(StringBuilder contentBuilder, File path, int level) throws IOException {
        var fileName = path.getName();
        if (path.isFile()) {
            fileName = fileName.substring(0, fileName.lastIndexOf('.'));
        }
        if (fileName.trim().length() < 3) return;

        contentBuilder.append("#".repeat(level)).append(' ').append(toHeadingTitle(fileName)).append('\n');
        if (path.isDirectory()) {
            for (var file : Objects.requireNonNull(path.listFiles())) {
                appendSnippetContent(contentBuilder, file, level + 1);
            }
        }
        else if (level > 2 && path.getName().endsWith(".java")) {
            final var fileContent = Files.readString(path.toPath());
            final var clientInitEndStr = ".build();\n\n";
            final var clientInitStartStr = "VonageClient client";
            final int endIndex = fileContent.lastIndexOf('}', fileContent.lastIndexOf('}') - 1) - 1;
            final int startIndex = Math.min(endIndex, fileContent.contains(clientInitStartStr) ?
                        (isInitialize(path.getParentFile()) ? fileContent.indexOf(clientInitStartStr) - 8 :
                        fileContent.indexOf(clientInitEndStr) + clientInitEndStr.length()) :
                    fileContent.indexOf('{', fileContent.indexOf('{') + 1) + 2
            );

            final var nugget = fileContent.substring(startIndex, endIndex)
                    .stripTrailing().stripIndent().replace("\t", "    ");
            contentBuilder.append("\n```java\n").append(nugget).append("\n```\n");
        }
    }
}
